---
title: "Assigment - kNN DIY"
author:
  - name author here - TICE97
  - name reviewer here - JuniorB2
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
   html_notebook:
    toc: true
    toc_depth: 2
---


```{r}
library(tidyverse)
library(googlesheets4)
library(class)
library(caret)
```

---

Choose a suitable dataset from [this](https://github.com/HAN-M3DM-Data-Mining/assignments/tree/master/datasets) folder and train  your own kNN model. Follow all the steps from the CRISP-DM model.

```{r}
url <- "https://raw.githubusercontent.com/HAN-M3DM-Data-Mining/assignments/master/datasets/KNN-occupancy.csv"
rawDF <- read.csv(url)
str(rawDF)
room <-re
```
```{r}

```

## Business Understanding
#Temperature: Temperature in celcius
# Humidity: Relative Humidity in %
# Light: Light, in Lux
#CO2: CO2, in ppm
#HumidityRatio: Humidity Ratio, Derived quantity from temperature and relative humidity, in kgwater-vapor/kg-air
#Occupancy: Occupancy, 0 or 1, 0 for not occupied, 1 for occupied status


## Data Understanding
#The sets has 7 variables (rows) and 8143 observations (columns)
## Data Preparation
```{r}
cleanDF <- rawDF[-1]
head(cleanDF)

cntDiag <- table(cleanDF$Occupancy)
propDiag <- round(prop.table(cntDiag) * 100 , digits = 1)

cntDiag #Absolute numbers 
```

```{r}
#percentages
propDiag


```

```{r}
cleanDF$diagnosis <- factor(cleanDF$Occupancy, levels = c("0", "1"), labels = c("Unoccupied", "Occupied")) %>% relevel("Occupied")
head(cleanDF, 10)
```

```{r}
summary(cleanDF[c("Temperature", "Light", "CO2", "HumidityRatio")]) #We will look at three characteristics
```
```{r}
normalize <- function (x) { # Function takes in a vector
  return ((x - min(x)) / (max(x) - min(x))) # distance of item value - minimum vector value divided by the range of all vector values
}
testSet1 <- c(1:5)
testSet2 <- c(1:5) * 10
cat("testSet1:", testSet1, "\n")
```

```{r}
cat("testSet2:", testSet2, "\n")
```
```{r}
cat("Normalized testSet1:", normalize(testSet1), "\n")
```
```{r}
cat("Normalized testSet2:", normalize(testSet2))
```
```{r}
nCols <- dim(cleanDF)[2]
cleanDF_n <- sapply(2:nCols, function(x) {
normalize(cleanDF[, x])}) %>% as.data.frame(.)

summary(cleanDF_n[c("Temperature", "Light", "CO2")])
```

```{r}
trainDF_feat <- cleanDF_n[1:469,  ]
testDF_feat <- cleanDF_n[470:569,  ]
```

```{r}
trainDF_labels <- cleanDF[1:469,  1]
testDF_labels <- cleanDF[470:569,  1]
```

## Modeling
text and code here
```{r}
cleanDF_test_pred <- knn(train = as.matrix(trainDF_feat), test = as.matrix(testDF_feat), cl = as.matrix(trainDF_labels), k = 21)
head(cleanDF_test_pred) 
```

## Evaluation and Deployment
text and code here
```{r}
cleanDF_test_pred <- knn(train = as.matrix(trainDF_feat), test = as.matrix(testDF_feat), cl = as.matrix(trainDF_labels), k = 21)
head(cleanDF_test_pred)
```
```{r}
confusionMatrix(cleanDF_test_pred, testDF_labels[[1]], positive = NULL, dnn = c("Prediction", "True"))
```

reviewer adds suggestions for improving the model
